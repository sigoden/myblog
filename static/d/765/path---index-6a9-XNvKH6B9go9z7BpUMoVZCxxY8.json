{"data":{"site":{"siteMetadata":{"pageSize":10,"pageScrollLoadThreshold":300,"githubUrl":"https://github.com/sigoden"}},"allMarkdownRemark":{"totalCount":23,"edges":[{"node":{"excerpt":"本文将以一款超简单的博客应用为例子，介绍如何使用 Htte 进行 API 接口的自动化测试。 Htte 介绍 Htte  是一款自动化测试框架。它允许你使用 YAML 编写测试，不需要编写代码。 难度低，上手快。 编写一个测试就是罗列出请求数据以及预期的响应数据。htte…","fields":{"slug":"/how-to-automate-testing-api-with-htte/"},"frontmatter":{"tags":["howto","htte","api-testing","automation-testing"],"excerpt":"本文将以一款超简单的博客应用为例子，介绍如何使用 Htte 进行 API 接口的自动化测试","draft":null,"title":"基于 Htte 的 API 自动化测试","date":"April 28, 2018"}}},{"node":{"excerpt":"介绍 Gatsby 是一款基于 React 和 GraphQL 的静态文档生成器。 Gatsby 从各种媒介收集数据源，通过 GraphQL 暴露给前端，前端使用 React 生成界面。Gatsby…","fields":{"slug":"/how-to-use-gatsby/"},"frontmatter":{"tags":["howto","react","graphql"],"excerpt":"Gatsby 是一款超赞的基于 React 和 GraphQL 静态文档生成器，本文将以从零搭建一个博客系统的形式演示如何使用 Gatsby 生成静态站点。","draft":null,"title":"使用 Gatsby 创建静态站点","date":"March 12, 2018"}}},{"node":{"excerpt":"概述 Dockerfile 中的 ENTRYPOINT 指令和 CMD 指令都可以设置容器启动时要执行的命令。 ENTRYPOINT 有两种形式: exec 模式，如  shell 模式, 如  而 CMD 也有两种形式: exec 模式，如  当有 entrypoint…","fields":{"slug":"/dockerfile-entrypoint-vs-cmd/"},"frontmatter":{"tags":["options","docker"],"excerpt":"Dockerfile 中的 ENTRYPOINT 指令和 CMD 指令都可以设置容器启动时要执行的命令，但用途是有略微不同的，本文将通过实验分析它们的不同之处，给出最佳实践。","draft":false,"title":"对比分析 Dockerfile 中的 ENTRYPOINT 和 CMD","date":"November 15, 2017"}}},{"node":{"excerpt":"最小的镜像是？ scratch scratch 镜像很赞，它简洁、小巧而且快速， 它没有 bug、安全漏洞、延缓的代码或技术债务。这是因为它基本上是空的。\nscratch 镜像不能执行一些常规的  ,  ,   等 docker 命令，只能通过 Dockerfile…","fields":{"slug":"/docker-faq/"},"frontmatter":{"tags":["faq","docker"],"excerpt":"介绍并汇总 Docker 使用一些注意事项，技巧，心得","draft":false,"title":"Docker 一问一答","date":"November 15, 2017"}}},{"node":{"excerpt":"getopt 是什么 getopt 是一个 c 编写的程序，提供参数解析功能。它是为了替换 bash 内置的老的 getopts 函数。如果设置了   环境变量，可以像使用 getopts 函数一样使用 getopt 命令。 getopt vs getopts getopts…","fields":{"slug":"/how-to-use-getopt-to-build-cli/"},"frontmatter":{"tags":["howto","linux","bash"],"excerpt":"有时我们需要自动化一些作业，这就需要编写 BashScript。为了控制脚本的行为，我们有两种选择: 环境变量和命令行参数。BashScript 中解析命令行参数常常会用到 getopt。","draft":false,"title":"在 Bash 中使用 getopt 解析命令行参数","date":"September 16, 2017"}}},{"node":{"excerpt":"Electron 是一款可以通过 Web 技术构建跨平台桌面应用的框架。它将 Chromium 和 Node.js 的事件循环整合在一起，并提供了一些与原生系统交互的 API。 通过 Electron，我们可以使用自己所熟悉的前端技术轻松构建出一款能运行在 Windows…","fields":{"slug":"/build-and-publish-electron-app-with-ci/"},"frontmatter":{"tags":["howto","ci","electron"],"excerpt":"通过 Electron，我们可以使用自己所熟悉的前端技术轻松构建出一款能运行在 Windows, Linux 和 Mac 上的桌面级应用程序。本文将介绍一种简单高效的方法构建并发布安装包。","draft":null,"title":"使用 CI 构建和发布 electron 应用","date":"August 16, 2017"}}},{"node":{"excerpt":"本文将讲述如何使用 Verdaccio  搭建私有 npm 仓储。 入门 verdaccio 是个发布在 npm 上的命令行工具。可以通过 npm 直接下载安装 verdaccio…","fields":{"slug":"/verdaccio-private-npm-registry/"},"frontmatter":{"tags":["howto","registry","npm"],"excerpt":"私有 npm 仓储可以保护企业的内部库，可以通过缓存加快企业内部包的安装。如何搭建一套私有 npm 仓储呢？","draft":null,"title":"使用 verdaccio 搭建 npm 私有仓储","date":"July 29, 2017"}}},{"node":{"excerpt":"概述 nginx 是模块化的，多种多样的模块提供了各种各样的功能。模块会对外暴露一些配置的 指令  和 变量 。\n一般的 nginx 发行版只包含部分模块，具体有那些可以运行 查看，如果使用了没有编译在 nginx 中的模块指令，nginx…","fields":{"slug":"/nginx-how-to-write-conf/"},"frontmatter":{"tags":["howto","nginx"],"excerpt":"nginx 可以作为静态文件服务器，可以伺服单页面应用，可以反向代理 API, 可以配置 https 等，任何一项功能都需要相应配置。如何配置合乎自己需要的 nginx 呢？","draft":null,"title":"nginx 配置从入门到精通","date":"July 27, 2017"}}},{"node":{"excerpt":"身份认证 不要使用   使用标准的认证协议 (如 JWT, OAuth). 不要再造  ,  ,   这些轮子, 使用标准的. 在登录中使用   和自动封禁功能. 加密所有的敏感数据. JWT (JSON Web Token…","fields":{"slug":"/api-security-checklist/"},"frontmatter":{"tags":["manifest","api","security"],"excerpt":"当你在设计，测试以及发布你的 API 的时候所需要核对那些重要安全措施呢？","draft":null,"title":"开发安全的 API 所需要核对的清单","date":"July 27, 2017"}}},{"node":{"excerpt":"WEBHOOK 介绍 Webhook 允许第三方应用监听 WEB 服务中的特定事件，在这些事件发生时通过 HTTP POST 方式通知 ( 超时 5 秒） 到第三方应用指定的 Web URL。 例如项目有新的内容 Push，或是 Merge Request…","fields":{"slug":"/webhook-deploy/"},"frontmatter":{"tags":["howto","ci","nodejs"],"excerpt":"如何有一种机制，直接克隆提交到仓储的代码，进行测试并部署，生活将方便很多。这种机制是存在的，名为 webhook。","draft":null,"title":"使用 webhook 自动部署","date":"July 21, 2017"}}},{"node":{"excerpt":"介绍 键空间通知使得客户端可以通过订阅频道或模式， 来接收那些以某种方式改动 了 Redis 数据集的事件。\n比如说，对 0 号数据库的键 mykey 过期时，系统将分发两条消息， 相当于执行以下两个 PUBLISH 命令： 订阅第一个频道  可以接收…","fields":{"slug":"/redisyan-shi-tui-song-xiao-xi/"},"frontmatter":{"tags":["tips","nodejs","redis"],"excerpt":"常常碰到这样的需求：预约前一个小时向短信通知用户不要错过消费，订单超过 24 小时而没有进一步操作自动取消。可以通过 Redis 的键空间通知实现类似需求。","draft":null,"title":"Redis 延时推送消息","date":"July 05, 2017"}}},{"node":{"excerpt":"为什么要阅读开源项目 源码是唯一的真实 加深对项目的理解 学习自己没有的知识 学习他人的写法，有助于自己代码质量的提高 开源项目难点 不知道从哪儿开始 文件太多，无法屡清楚结构 代码太多，测试编译时耗费太多时间 内容太多，难以全面理解 开源项目特点 开源项目最早只是一个 idea…","fields":{"slug":"/gitbang-zhu-yue-du-kai-yuan-xiang-mu/"},"frontmatter":{"tags":["tips","git","opensource"],"excerpt":"开源项目在早期版本时代码量少，结构简练，且创意和思想已经足够成熟，是切入开源项目的好时机，我们可以使用 git 回溯项目早期代码，并在各个提交间畅游。","draft":null,"title":"使用 git 阅读开源项目时的小技巧","date":"May 17, 2017"}}},{"node":{"excerpt":"权限 npm 允许通过 scope 组织私有包，通过 team 细化权限控制。 npm 官方仓储有两种类型的包，普通包和 scope 包 普通包特征： 只能公有，谁都可以下载使用 仅可以通过所有者 (owner…","fields":{"slug":"/npm-can-kao-shou-ce/"},"frontmatter":{"tags":["guide","nodejs","npm"],"excerpt":"一份详见的 npm 使用手册","draft":null,"title":"一份详见的 npm 参考手册","date":"May 06, 2017"}}},{"node":{"excerpt":"历史 Web 端与服务器间的实时数据传输的是一个很重要的需求，但最早只能通过 AJAX 轮询询实现。在 WebSocket 标准没有推出之前，AJAX 轮询是唯一可行的方式（通过 Flash 浏览器也可以，但这里不做讨论）。AJAX 轮询原理是设置定时器，定时通过 AJAX…","fields":{"slug":"/socket-iozhi-yi-jie-shao/"},"frontmatter":{"tags":["howto","socket.io","javascript"],"excerpt":"socket.io 提供了基于事件的实时双向通讯，本文将对其进行详细介绍","draft":null,"title":"socket.io 系列一：介绍","date":"April 18, 2017"}}},{"node":{"excerpt":"服务端与客户端连接 socket.io 同时提供了服务端和客户端的 API 服务端 socket.io 必须绑定一个 http.Server 实例 绑定 http.Server 隐式绑定 通过实例化时传入端口或实例化后调用 或 函数进行隐式绑定。socket.io…","fields":{"slug":"/socket-iozhi-er-ji-ben-ying-yong/"},"frontmatter":{"tags":["howto","socket.io","javascript"],"excerpt":"socket.io 提供了基于事件的实时双向通讯，本文将对其进行详细(二)","draft":null,"title":"socket.io 系列二：基本应用","date":"April 18, 2017"}}},{"node":{"excerpt":"静态文件 socket.io 默认情况下会通过 socket.io-client 包提供 socket.io.min.js 和 socket.io.js.map 下载\n运行实例 app.js 浏览器访问 可以加载压缩的源码，访问 加载 sourcemap…","fields":{"slug":"/socket-iozhi-san-shen-ru-xue-xi/"},"frontmatter":{"tags":["howto","socket.io","javascript"],"excerpt":"socket.io 提供了基于事件的实时双向通讯，本文将对其进行详细介绍(三)","draft":null,"title":"socket.io 系列三：深入学习","date":"April 18, 2017"}}},{"node":{"excerpt":"试错环境 文本的解析规则的编写相对来说还是挺复杂的，我们需要搭建一个调试环境，以便我们试错。 配置 logstash 从标准终端输入中读取数据，grok 解析后，rubydebug 编码后打印到标准终端。 对应配置文件 logstash.conf 如下 Logstash…","fields":{"slug":"/logstash-grok-wen-ben-jie-xi/"},"frontmatter":{"tags":["howto","elk","grok","logstash"],"excerpt":"Logstash 常用于 ELK 栈(在日志处理领域被广泛使用), 主要负责数据的收集，处理，转发。而 grok 是 filters 模块中一个文本正则解析插件。只有理解了 grok, 我们才能从容应对各种各样的日志内容，本文结合实例详细分析了如何使用 grok。","draft":null,"title":"探究 logstash grok 文本解析","date":"April 07, 2017"}}},{"node":{"excerpt":"…","fields":{"slug":"/javascriptbiao-zhun-dai-ma-feng-ge/"},"frontmatter":{"tags":["option","javascript"],"excerpt":"JavaScript 是一种多范式的灵活的动态语言，为了强化协作，我们常常需要再项目中选定一种风格，如何选择呢？","draft":null,"title":"我们该以何种风格写 javascript","date":"April 06, 2017"}}},{"node":{"excerpt":"${parameter} 等同 $paramter，常见于拼接字符串时，使变量表述更清晰 ${parameter-default}, ${parameter:-default} 如果参数 parameter 没有设置，使用 default 值 ${parameter…","fields":{"slug":"/shell-can-shu-ti-huan/"},"frontmatter":{"tags":["guide","linux","bash"],"excerpt":"如何设置默认变量，如何进行字符截取，如何对变量应用正则进行检测和替换，这些都可以通过 BashScript 参数替换实现。","draft":null,"title":"BashScript 参数替换完全指南","date":"March 29, 2017"}}},{"node":{"excerpt":"使用 docker 运行服务，你可以拥有一致的环境，可以精确控制服务的运行资源 (cpu, 内存），可以方便的设置端口和网络，可以使用镜像仓储管理和分发代码。现在越来越多的开发者选择将服务运行在 docker 上。 好多 nodejs 用户在使用 docker…","fields":{"slug":"/nodejszhi-chuang-jian-zui-xiao-dockerjing-xiang/"},"frontmatter":{"tags":["howto","nodejs","docker"],"excerpt":"本文将介绍如何创建极简 node 镜像","draft":null,"title":"创建极简 nodejs docker 镜像","date":"March 26, 2017"}}},{"node":{"excerpt":"NPM 是什么 NPM（node package manager），通常称为 node 包管理器。顾名思义，它的主要功能就是管理 node 包，包括：安装、卸载、更新、查看、搜索、发布等，npm 将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。 NPM…","fields":{"slug":"/npman-zhuang-de-bao-wei-shi-yao-bu-yi-zhi/"},"frontmatter":{"tags":["why","npm","nodejs"],"excerpt":"npm 包在安装是可能会产生不一致的目录，这是如何产生的？本文将对不一致原因进行分析。","draft":null,"title":"npm 安装的包为什么不一致","date":"March 25, 2017"}}},{"node":{"excerpt":"Vagrant 是一个用于创建和部署虚拟化开发环境的工具。vagrant 镜像是一个 vagrant 用来启动虚拟机的文件，通常是纯净的操作系统镜像，如 Ubuntu, Debian，CentOS…","fields":{"slug":"/cong-ling-kai-shi-da-jian-vagrantrong-qi-2/"},"frontmatter":{"tags":["howto","vagrant"],"excerpt":"通过 vagrant 镜像我们可以再发行版的基础上自定义 Linux 镜像并发布。本文将介绍如何从无到有打造一款 vagrant 镜像。","draft":null,"title":"从零开始创建 Vagrant 镜像","date":"March 16, 2017"}}},{"node":{"excerpt":"准备 这里唯一需要的安装的软件就是 docker, 当然文末也提供了 文件可以通过 docker-compose up 方便的一键运行复制集集群。基于 docker, 我们甚至不需要本地安装 mongodb, 所有的 mongodb 实例均运行在 docker…","fields":{"slug":"/dockerda-jian-mongodbfu-zhi-ji-2/"},"frontmatter":{"tags":["howto","mongo","docker"],"excerpt":"Mongo 是一款常用的文档型数据库，它提供了复制集用来确保当数据库崩溃或关闭时数据的完整性。在生产环境中 Mongo 多是以复制集的形式存在，如何搭建却是一个问题，本文介绍如何使用 Docker 搭建 Mongo 复制集。","draft":null,"title":"Docker 搭建 mongodb 复制集","date":"March 13, 2017"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}