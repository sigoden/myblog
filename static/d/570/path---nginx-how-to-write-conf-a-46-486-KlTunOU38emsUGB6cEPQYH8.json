{"data":{"site":{"siteMetadata":{"title":"Sigoden | Blog","siteUrl":"https://blog.sigoden.com","siteAuthor":"sigoden","githubUrl":"https://github.com/sigoden"}},"markdownRemark":{"html":"<h2 id=\"概述\"><a href=\"#%E6%A6%82%E8%BF%B0\" aria-label=\"概述 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>概述</h2>\n<p>nginx 是模块化的，多种多样的模块提供了各种各样的功能。模块会对外暴露一些配置的<a href=\"http://nginx.org/en/docs/dirindex.html\">指令</a> 和<a href=\"http://nginx.org/en/docs/varindex.html\">变量</a>。\n一般的 nginx 发行版只包含部分模块，具体有那些可以运行<code class=\"language-text\">nginx -V</code>查看，如果使用了没有编译在 nginx 中的模块指令，nginx 将会报错，所以使用前请确保模块已编译。</p>\n<h2 id=\"指令\"><a href=\"#%E6%8C%87%E4%BB%A4\" aria-label=\"指令 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>指令</h2>\n<p>指令控制模块的行为，分为块指令（如<code class=\"language-text\">server</code>,<code class=\"language-text\">stream</code>,<code class=\"language-text\">location</code>）和普通指令（如 <code class=\"language-text\">listen</code>, <code class=\"language-text\">server_name</code>, <code class=\"language-text\">return</code>, <code class=\"language-text\">if</code>）。</p>\n<h2 id=\"块指令\"><a href=\"#%E5%9D%97%E6%8C%87%E4%BB%A4\" aria-label=\"块指令 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>块指令</h2>\n<p>块指令语法：<code class=\"language-text\">name { ... }</code>; 花括号构成一个上下文，指令是有上下文限制的。如<code class=\"language-text\">server</code>需要运行在<code class=\"language-text\">http</code>上下文中，<code class=\"language-text\">server_name</code>需要运行在<code class=\"language-text\">server</code>上下文中。指令的上下文官网文档上多有标注的，如<code class=\"language-text\">server_name</code>的文档</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Syntax:\tserver_name name ...;\nDefault: server_name &quot;&quot;;\nContext: server</code></pre></div>\n<p><code class=\"language-text\">Context: server</code>表示<code class=\"language-text\">server_name</code>需要上下文<code class=\"language-text\">server</code>\n像<code class=\"language-text\">events</code>和<code class=\"language-text\">http</code>不被包含在任何<code class=\"language-text\">{}</code>中，这类指令的上下文为<code class=\"language-text\">main</code>。</p>\n<p>典型的 nginx 配置中块指令结构如下</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">...              #全局块\n\nevents {         #events 块\n   ...\n}\n\nhttp {     #http 块\n    ...    #http 全局块\n    server {      #server 块\n        ...       #server 全局块\n        location [PATTERN] { #location 块\n            ...\n        }\n        location [PATTERN] {\n            ...\n        }\n    }\n    server {\n      ...\n    }\n    ...    #http 全局块\n}</code></pre></div>\n<h3 id=\"普通指令\"><a href=\"#%E6%99%AE%E9%80%9A%E6%8C%87%E4%BB%A4\" aria-label=\"普通指令 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>普通指令</h3>\n<p>普通指令语法：<code class=\"language-text\">name params [params];</code>，参数间空格隔开，句尾分号必须。 如果参数为多行字符串，需要用引号（单双均可）包起来。例如</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">log_format compression &#39;$remote_addr - $remote_user [$time_local] &#39;\n                       &#39;&quot;$request&quot; $status $bytes_sent &#39;\n                       &#39;&quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$gzip_ratio&quot;&#39;;</code></pre></div>\n<p>普通指令也是有上下文的，使用时请注意。而且有些指令有默认值，有时候并不出现在配置中，但是并不表示它不起作用，如<code class=\"language-text\">listen</code>，其默认值为<code class=\"language-text\">listen *:80 | *:8000;</code>, <code class=\"language-text\">server</code>块如果没有显示的配置<code class=\"language-text\">listen</code>, 将默认监听端口 80。</p>\n<h2 id=\"变量\"><a href=\"#%E5%8F%98%E9%87%8F\" aria-label=\"变量 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>变量</h2>\n<p>nginx 变量由 $ 起头，采用下划线命名发，存储值。</p>\n<p>可以作为指令参数</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fastcgi_param QUERY_STRING $query_string;</code></pre></div>\n<p>也可以作为参数的一部分</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</code></pre></div>\n<h3 id=\"调试变量\"><a href=\"#%E8%B0%83%E8%AF%95%E5%8F%98%E9%87%8F\" aria-label=\"调试变量 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>调试变量</h3>\n<p>nginx 提供了很多变量，我们如何查看或调试这些变量呢？</p>\n<ul>\n<li>通过 return 返回变量值</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  location / {\n     return 200 &#39;request_uri: $request_uri\n       query_string: $query_string&#39;;\n  }</code></pre></div>\n<ul>\n<li>通过日志</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">log_format var &#39;request_uri: $request_uri\n       query_string: $query_string&#39;;\n\n  location / {\n    access_log /path/to/var/access.log var;\n    return 200;\n  }</code></pre></div>\n<ul>\n<li>通过自定义响应头</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  location / {\n    add_header X-VAR-REQUEST-URI $request_uri;\n    add_header X-VAR-QUERY-STRING $query_string;\n  }</code></pre></div>\n<h3 id=\"自定义变量\"><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F\" aria-label=\"自定义变量 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>自定义变量</h3>\n<p>指令<code class=\"language-text\">set</code>可以自定义变量</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Syntax:\tset $variable value;\nDefault:\t—\nContext:\tserver, location, if</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">set $my_var &quot;hello world&quot;</code></pre></div>\n<p>但请注意，该功能是<code class=\"language-text\">ngx_http_rewrite_module</code>模块提供的，并不通用。该模块还提供了<code class=\"language-text\">if</code>,<code class=\"language-text\">break</code>,<code class=\"language-text\">return</code>等指令，这些指令让人觉得 nginx.conf 是一种程序脚本，这其实是错觉。它们仅仅是 nginx 指令而已。</p>\n<h2 id=\"实战\"><a href=\"#%E5%AE%9E%E6%88%98\" aria-label=\"实战 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实战</h2>\n<p>nginx 配置就是指令和变量的组合。如同知道词汇和语法还是很难写好文章，知道指令和变量还是不容易写出好的配置。写出一套好配置没什么技巧，只能多看多练了。</p>\n<p>下面举个例子说明如何一步一步配置 nginx</p>\n<h3 id=\"案例介绍\"><a href=\"#%E6%A1%88%E4%BE%8B%E4%BB%8B%E7%BB%8D\" aria-label=\"案例介绍 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>案例介绍</h3>\n<h4 id=\"服务与资源\"><a href=\"#%E6%9C%8D%E5%8A%A1%E4%B8%8E%E8%B5%84%E6%BA%90\" aria-label=\"服务与资源 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>服务与资源</h4>\n<ul>\n<li>官网主页的静态资源，存储在 /data/wwww 目录，由一堆 html,js,css,png 等资源文件组成，其中主页文件为 home.html。</li>\n<li>微信公众号页面是单页面，存储在 /data/wx 目录。</li>\n<li>微信后台运行于服务器 A: 10.0.12.1 和服务器 B: 10.0.12.2 的 3000 端口。</li>\n<li>域名 www.example.com 证书位于 /data/certs/www.example.com/{fullchain.pem, privkey.pem}</li>\n</ul>\n<h4 id=\"域名绑定\"><a href=\"#%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A\" aria-label=\"域名绑定 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>域名绑定</h4>\n<ul>\n<li>官网主页绑定 www.example.com，其中 example.com 也绑定主页</li>\n<li>微信公众号页面绑定 wx.example.com</li>\n<li>微信后台绑定 api.example.com</li>\n</ul>\n<h4 id=\"要求\"><a href=\"#%E8%A6%81%E6%B1%82\" aria-label=\"要求 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>要求</h4>\n<ul>\n<li>访问域名能获取正常资源</li>\n<li>静态资源要进行压缩</li>\n<li>官网首页启用 https</li>\n</ul>\n<h3 id=\"配置过程\"><a href=\"#%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B\" aria-label=\"配置过程 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置过程</h3>\n<h4 id=\"静态资源服务器\"><a href=\"#%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8\" aria-label=\"静态资源服务器 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>静态资源服务器</h4>\n<p>本例中使用 nginx 作为静态资源服务器和发现代理服务器，涉及到的功能全部与 http 相关，而 nginx 与 http 相关的模块是<code class=\"language-text\">ngx_http_core_module</code>。\n同一个端口运行多个以域名作为区分的虚拟服务，查看<code class=\"language-text\">ngx_http_core_module</code>文档</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Syntax:\tserver { ... }\nDefault:\t—\nContext:\thttp\nSets configuration for a virtual server. There is no clear separation between IP-based (based on the IP address) and name-based (based on the “Host” request header field) virtual servers. Instead, the listen directives describe all addresses and ports that should accept connections for the server, and the server_name directive lists all server names. Example configurations are provided in the “How nginx processes a request” document.</code></pre></div>\n<p>可以看到<code class=\"language-text\">Sets configuration for a virtual server</code>这句，块指令 server 正是我们所需要的，\n同时文档指出<code class=\"language-text\">server_name</code>用来制定服务所绑定的域名，官网主页配置如下</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\n  server_name www.example.com;\n}</code></pre></div>\n<p>我们需要告诉 nginx 当收到请求时去磁盘的哪个位置获取文件，指令<code class=\"language-text\">root</code>出场了</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\n  server_name www.example.com;\n  root /data/www;\n}</code></pre></div>\n<p>配置完成，<code class=\"language-text\">nginx -t</code>测试语法，没问题，<code class=\"language-text\">nginx -s reload</code>让配置生效。请求<code class=\"language-text\">www.example.com/home.html</code>发现可以正常工作，直接访问<code class=\"language-text\">www.example.com</code>则 403。\n但是我们希望输入<code class=\"language-text\">www.example.com</code>就能获得首页，而不用多输入一段<code class=\"language-text\">/home.html</code>。</p>\n<p>查看<code class=\"language-text\">ngx_http_core_module</code>文档，发现没有相关功能的模块，可能是其它模块提供的功能，查找 http 以及首页 (index) 相关的模块，果然找到<code class=\"language-text\">ngx_http_index_module</code>，它只有一个指令 index</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\n  server_name www.example.com;\n  root /data/www;\n  location / {\n    index home.html index.html;\n  }\n}</code></pre></div>\n<p>刷新配置，请求<code class=\"language-text\">www.example.com</code>，正常\n一个简单的静态资源服务器完成啦！!!</p>\n<h4 id=\"https\"><a href=\"#https\" aria-label=\"https permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>https</h4>\n<p>https 可以理解为<code class=\"language-text\">http over ssl</code>, 查找 http 以及 ssl 相关模块，找到<code class=\"language-text\">ngx_http_ssl_module</code>\n文档中就给出了具体的配置示例</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">worker_processes auto;\n\nhttp {\n\n    ...\n\n    server {\n        listen              443 ssl;\n        keepalive_timeout   70;\n\n        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;\n        ssl_ciphers         AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;\n        ssl_certificate     /usr/local/nginx/conf/cert.pem;\n        ssl_certificate_key /usr/local/nginx/conf/cert.key;\n        ssl_session_cache   shared:SSL:10m;\n        ssl_session_timeout 10m;\n\n        ...\n    }</code></pre></div>\n<p>我们可以参照这些配置，配置 https 版的 www.example.com</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\n  listen              443 ssl;\n  keepalive_timeout   70;\n\n  ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;\n  ssl_ciphers         AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;\n  ssl_certificate     /data/certs/www.example.com/fullchain.pem;\n  ssl_certificate_key /data/certs/www.example.com/privkey.pem;\n  ssl_session_cache   shared:SSL:10m;\n  ssl_session_timeout 10m;\n\n  server_name         www.example.com;\n  root /data/www;\n  location / {\n    index home.html index.html;\n  }\n}</code></pre></div>\n<h4 id=\"跳转301\"><a href=\"#%E8%B7%B3%E8%BD%AC301\" aria-label=\"跳转301 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>跳转301</h4>\n<p>example.com 和 www.example.com 同时绑定一个服务，我们可以通过<code class=\"language-text\">server_name</code>多参数实现</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server_name example.com www.example.com;</code></pre></div>\n<p>但是这样不利于统计分析（通一页面重复统计两次等），更好的做法是进行 301 跳转。\n处理这类需求的模块是<code class=\"language-text\">ngx_http_rewrite_module</code>, 指令<code class=\"language-text\">rewrite</code>和<code class=\"language-text\">return</code>都满足需求，选那个呢？</p>\n<p>这里选择<code class=\"language-text\">return</code>，因为<code class=\"language-text\">rewrite</code>要进行正则匹配，性能上逊色于<code class=\"language-text\">return</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\n  server_name example.com;\n  return 301 https://www.example.com;\n}</code></pre></div>\n<h4 id=\"单页面\"><a href=\"#%E5%8D%95%E9%A1%B5%E9%9D%A2\" aria-label=\"单页面 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>单页面</h4>\n<p>单页面也是静态资源，其特殊之处在于路由是被一个页面接管的。<code class=\"language-text\">wx.example.com</code>请求是的首页，<code class=\"language-text\">wx.example.com/user</code>也请求的是首页，首页里的 js 会根据路径自己渲染合适的页面。</p>\n<p>如果像之前<code class=\"language-text\">www.example.com</code>那样配置，用户在单页面里刷新浏览器就 404 了，因为 nginx 根据路径查找文件却找不到。</p>\n<p>所有请求都返回首页也不对，有些 css，js 需要正确返回文件。而且单页面也不是一个其它页面也没有了，我可能有一个帮助页面<code class=\"language-text\">help.html</code>不是用单页面开发的，但也要正确加载啊。\n我们期望 nginx 先按路径查找文件，找到了，返回找到的。找不到，很有可能是单页面的路由，返回单页面首页。</p>\n<p>很幸运，nginx 提供了指令<code class=\"language-text\">try_files</code>处理这种情况</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\n  server_name wx.example.com;\n  root /data/wx;\n  location / {\n    try_files $uri $uri/ /index.html;\n  }\n}</code></pre></div>\n<h4 id=\"压缩\"><a href=\"#%E5%8E%8B%E7%BC%A9\" aria-label=\"压缩 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>压缩</h4>\n<p>为了减小带宽，一些静态资源一般需要压缩后传送。linux 世界有一款常用的压缩软件<code class=\"language-text\">gzip</code>, nginx 也提供了类似的模块<code class=\"language-text\">ngx_http_gzip_module</code>\n由于不管是<code class=\"language-text\">www.example.com</code>还是<code class=\"language-text\">wx.example.com</code>都有静态资源，都需要压缩，所以可以直接配置在 http 块下，结合文档配置如下</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gzip            on;\ngzip_min_length 1000;\ngzip_proxied    expired no-cache no-store private auth;\ngzip_types      text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</code></pre></div>\n<p>根据静态资源类型调整<code class=\"language-text\">gzip_types</code>指令的参数</p>\n<h4 id=\"反向代理\"><a href=\"#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86\" aria-label=\"反向代理 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>反向代理</h4>\n<p>前面均是用 nginx 作为静态资源服务器，配置<code class=\"language-text\">api.example.com</code>则需要用到 nginx 的反向代理功能了。\n与代理相关的模块是<code class=\"language-text\">ngx_http_proxy_module</code>，根据文档中的例子，得出如下配置</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\n  server_name api.example.com;\n  location / {\n    proxy_pass       http://10.0.12.1:3000;\n    proxy_set_header Host      $host;\n    proxy_set_header X-Real-IP $remote_addr;\n  }\n}</code></pre></div>\n<p>测试发现，已经可以正常工作了。但是我们的后台服务器有两台，难道要 proxy_pass 两次</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  location / {\n    proxy_pass       http://10.0.12.1:3000;\n    proxy_pass       http://10.0.12.2:3000;\n  }</code></pre></div>\n<p>可惜 nginx 不支持。\n还是看文档，发现多次提到<code class=\"language-text\">upstream</code>的概念。查找<code class=\"language-text\">ngx_http_upstream_module</code>，发现正式我们需要的</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">upstream api {\n  server 10.0.12.1:3000;\n  server 10.0.12.2:3000;\n}\n\nserver {\n  server_name api.example.com;\n  location / {\n    proxy_pass       http://api;\n    proxy_set_header Host      $host;\n    proxy_set_header X-Real-IP $remote_addr;\n  }\n}</code></pre></div>\n<h3 id=\"小结\"><a href=\"#%E5%B0%8F%E7%BB%93\" aria-label=\"小结 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>小结</h3>\n<p>案例到这儿就分析完了，思路就是根据需求，找到可能提供这个需求的模块。例如需要权限控制，有模块<code class=\"language-text\">ngx_http_auth_basic_module</code>；需要限制流量，找模块<code class=\"language-text\">ngx_http_limit_req_module</code>。\n进入模块文档，一般复杂一点的模块都会提供一些配置范例，可以多参考。然后查找相关指令，编写配置，测试。</p>\n<h2 id=\"结论\"><a href=\"#%E7%BB%93%E8%AE%BA\" aria-label=\"结论 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>结论</h2>\n<p>到这儿大家应该对 nginx 配置有了一个直观的认知和清晰的构造思路。有时间多分析，多练习。完成功能只是起步，nginx 中有大量的指令是用来性能调优，安全强化的，配置时也请多注意。\n模块提供了</p>","excerpt":"概述 nginx 是模块化的，多种多样的模块提供了各种各样的功能。模块会对外暴露一些配置的 指令  和 变量 。\n一般的 nginx 发行版只包含部分模块，具体有那些可以运行 查看，如果使用了没有编译在 nginx 中的模块指令，nginx…","timeToRead":7,"headings":[{"value":"概述","depth":2},{"value":"指令","depth":2},{"value":"块指令","depth":2},{"value":"普通指令","depth":3},{"value":"变量","depth":2},{"value":"调试变量","depth":3},{"value":"自定义变量","depth":3},{"value":"实战","depth":2},{"value":"案例介绍","depth":3},{"value":"服务与资源","depth":4},{"value":"域名绑定","depth":4},{"value":"要求","depth":4},{"value":"配置过程","depth":3},{"value":"静态资源服务器","depth":4},{"value":"https","depth":4},{"value":"跳转301","depth":4},{"value":"单页面","depth":4},{"value":"压缩","depth":4},{"value":"反向代理","depth":4},{"value":"小结","depth":3},{"value":"结论","depth":2}],"frontmatter":{"title":"nginx 配置从入门到精通","notoc":null,"excerpt":"nginx 可以作为静态文件服务器，可以伺服单页面应用，可以反向代理 API, 可以配置 https 等，任何一项功能都需要相应配置。如何配置合乎自己需要的 nginx 呢？","date":"July 27th 2017","rawDate":"2017-07-27T00:00:00.000Z"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/nginx-how-to-write-conf/","prev":{"fields":{"slug":"/verdaccio-private-npm-registry/"},"frontmatter":{"title":"使用 verdaccio 搭建 npm 私有仓储","draft":null,"tags":["howto","registry","npm"]}},"next":{"fields":{"slug":"/api-security-checklist/"},"frontmatter":{"title":"开发安全的 API 所需要核对的清单","draft":null,"tags":["manifest","api","security"]}}}}