{"data":{"site":{"siteMetadata":{"title":"Sigoden | Blog","siteUrl":"https://blog.sigoden.com","siteAuthor":"sigoden","githubUrl":"https://github.com/sigoden"}},"markdownRemark":{"html":"<h2 id=\"服务端与客户端连接\"><a href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5\" aria-label=\"服务端与客户端连接 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>服务端与客户端连接</h2>\n<p>socket.io 同时提供了服务端和客户端的 API</p>\n<p>服务端 socket.io 必须绑定一个 http.Server 实例</p>\n<h2 id=\"绑定-httpserver\"><a href=\"#%E7%BB%91%E5%AE%9A-httpserver\" aria-label=\"绑定 httpserver permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>绑定 http.Server</h2>\n<ol>\n<li>隐式绑定</li>\n</ol>\n<p>通过实例化时传入端口或实例化后调用<code class=\"language-text\">listen</code>或<code class=\"language-text\">attach</code>函数进行隐式绑定。socket.io 内部实例化并监听 http.Server</p>\n<ul>\n<li>实例化时传入端口</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let io = require(&#39;socket.io&#39;)(3000)</code></pre></div>\n<ul>\n<li>直接通过<code class=\"language-text\">listen</code>或<code class=\"language-text\">attach</code>函数绑定。<code class=\"language-text\">listen</code>与<code class=\"language-text\">attach</code>同义</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let io = require(&#39;socket.io&#39;)\nio.listen(3000) // io.attach(3000)</code></pre></div>\n<ol start=\"2\">\n<li>显示绑定</li>\n</ol>\n<p>可以手动指定 http.Server</p>\n<ul>\n<li>实例化时绑定</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let server = require(&#39;http&#39;).Server();\nlet io = require(&#39;socket.io&#39;)(server)\n\nserver.listen(3000)</code></pre></div>\n<ul>\n<li>通过<code class=\"language-text\">listen</code>或<code class=\"language-text\">attach</code>绑定</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let server = require(&#39;http&#39;).Server();\nlet io = require(&#39;socket.io&#39;)()\n\nio.listen(server) // io.attach(server)\n\nserver.listen(3000)</code></pre></div>\n<ul>\n<li>可以绑定 express 或 koa 等 http 框架</li>\n</ul>\n<p><strong>express</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let app = require(&#39;express&#39;)\nlet server = require(&#39;http&#39;).Server(app)\nlet io = require(&#39;socket.io&#39;)(server)\n\napp.listen(3000)</code></pre></div>\n<p><strong>koa</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let app = require(&#39;koa&#39;)()\nlet server = require(&#39;http&#39;).Server(app.callback())\n\nlet io = require(&#39;socket.io&#39;)(server)\n\napp.listen(3000)</code></pre></div>\n<h2 id=\"监听连接状态\"><a href=\"#%E7%9B%91%E5%90%AC%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81\" aria-label=\"监听连接状态 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>监听连接状态</h2>\n<p>当服务器端与客户端连接成功时，服务端会监听到<code class=\"language-text\">connection</code>和<code class=\"language-text\">connect</code>事件 (connection 与 connect 同义）, 客户端会监听到<code class=\"language-text\">connect</code>事件，断开连接时服务端的对应到客户端的 socket 与客户端均会均会监听到<code class=\"language-text\">disconnect</code>事件</p>\n<p>服务端代码</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let server = require(&#39;http&#39;).Server()\nlet io = require(&#39;socket.io&#39;)(server)\n\nserver.listen(3000);\nio.on(&#39;connection&#39;, socket =&gt; {\n  console.log(&#39;connect&#39;)\n  socket.on(&#39;disconnect&#39;, () =&gt; {\n    console.log(&#39;disconnect&#39;)\n  })\n  socket.disconnect()\n})</code></pre></div>\n<p>运行后打印</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">connect\ndisconnect</code></pre></div>\n<p>客户端代码</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let socket = io(&#39;http://localhost:3000&#39;)\nsocket.on(&#39;connect&#39;, () =&gt; {\n  console.log(&#39;connect&#39;)\n})\nsocket.on(&#39;disconnect&#39;, () =&gt; {\n  console.log(&#39;disconnect&#39;)\n})</code></pre></div>\n<p>运行后打印</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">connect\ndisconnect</code></pre></div>\n<h2 id=\"传输数据\"><a href=\"#%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE\" aria-label=\"传输数据 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>传输数据</h2>\n<p>服务器与客户端的 socket 是一个关联的 EventEmitter 对象，客户端 socket 派发的事件可以通以被服务端的 socket 接收，服务器端 socket 派发的事件也可以被客户端接受。基于这种机制，可以实现双向交流。</p>\n<p>现在模拟这样一种情况：客户端不停发送随机数，当随机数大于 0.95 时，服务端延时 1s 后向客户端发送警告以及警告次数</p>\n<p>服务端代码</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let server = require(&#39;http&#39;).Server()\nlet io = require(&#39;socket.io&#39;)(server)\n\nserver.listen(3000);\nio.on(&#39;connection&#39;, socket =&gt; {\n  socket.on(&#39;random&#39;, value =&gt; {\n    console.log(value)\n    if (value &gt; 0.95) {\n      if (typeof socket.warning === &#39;undefined&#39;) socket.warning = 0\n      setTimeout(() =&gt; {\n        socket.emit(&#39;warn&#39;, ++socket.warning)\n      }, 1000)\n    }\n  })\n})</code></pre></div>\n<p>socket 对象可以用来存储状态信息和自定义数据，如<code class=\"language-text\">socket.warning</code></p>\n<p>客户端代码</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let socket = io(&#39;http://localhost:3000&#39;)\nlet interval = setInterval(() =&gt; {\n  socket.emit(&#39;random&#39;, Math.random())\n}, 500)\nsocket.on(&#39;warn&#39;, count =&gt; {\n  console.log(&#39;warning count: &#39; + count)\n})\nsocket.on(&#39;disconnect&#39;, () =&gt; {\n  clearInterval(interval)\n})</code></pre></div>\n<h2 id=\"传输流\"><a href=\"#%E4%BC%A0%E8%BE%93%E6%B5%81\" aria-label=\"传输流 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>传输流</h2>\n<p>socket.io 可以处理流</p>\n<p>服务端代码</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">io.on(&#39;connection&#39;, function (socket) {\n  let stream = ss.createStream()\n  ss(socket).emit(&#39;script&#39;, stream)\n  fs.createReadStream(__filename).pipe(stream)\n})</code></pre></div>\n<p>客户端代码</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let socket = io(&#39;http://localhost:3000&#39;)\nss(socket).on(&#39;script&#39;, stream =&gt; {\n  let buffer = &#39;&#39;\n  stream.on(&#39;data&#39;, data =&gt; {\n    buffer += data.toString()\n  })\n  stream.on(&#39;end&#39;, () =&gt; {\n    console.log(buffer)\n  })\n})</code></pre></div>","excerpt":"服务端与客户端连接 socket.io 同时提供了服务端和客户端的 API 服务端 socket.io 必须绑定一个 http.Server 实例 绑定 http.Server 隐式绑定 通过实例化时传入端口或实例化后调用 或 函数进行隐式绑定。socket.io…","timeToRead":3,"headings":[{"value":"服务端与客户端连接","depth":2},{"value":"绑定 http.Server","depth":2},{"value":"监听连接状态","depth":2},{"value":"传输数据","depth":2},{"value":"传输流","depth":2}],"frontmatter":{"title":"socket.io 系列二：基本应用","notoc":null,"excerpt":"socket.io 提供了基于事件的实时双向通讯，本文将对其进行详细(二)","date":"April 18th 2017","rawDate":"2017-04-18"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/socket-iozhi-er-ji-ben-ying-yong/","prev":{"fields":{"slug":"/socket-iozhi-yi-jie-shao/"},"frontmatter":{"title":"socket.io 系列一：介绍","draft":null,"tags":["howto","socket.io","javascript"]}},"next":{"fields":{"slug":"/socket-iozhi-san-shen-ru-xue-xi/"},"frontmatter":{"title":"socket.io 系列三：深入学习","draft":null,"tags":["howto","socket.io","javascript"]}}}}