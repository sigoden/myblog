{"data":{"site":{"siteMetadata":{"title":"Sigoden | Blog","siteUrl":"https://blog.sigoden.com","siteAuthor":"sigoden","githubUrl":"https://github.com/sigoden"}},"markdownRemark":{"html":"<h2 id=\"getopt-是什么\"><a href=\"#getopt-%E6%98%AF%E4%BB%80%E4%B9%88\" aria-label=\"getopt 是什么 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getopt 是什么</h2>\n<p>getopt 是一个 c 编写的程序，提供参数解析功能。它是为了替换 bash 内置的老的 getopts 函数。如果设置了 <code class=\"language-text\">GETOPT_COMPATIBLE</code> 环境变量，可以像使用 getopts 函数一样使用 getopt 命令。</p>\n<p>getopt vs getopts</p>\n<ul>\n<li>getopts 是 bash 内建命令的， 而 getopt 是外部命令(所以发行版都有装)。</li>\n<li>getopts 不支持长选项， 比如： <code class=\"language-text\">--date</code>。</li>\n<li>\n<p>getopt 支持选项重排。</p>\n<blockquote>\n<p>选项重排指可以将带 <code class=\"language-text\">-</code> 或 <code class=\"language-text\">-–</code> 的参数写在其他参数的前面，也可以写在后面。如 <code class=\"language-text\">mycmd -a abc edf -d</code> 进重排变为 <code class=\"language-text\">mycmd -a abc -d -- edf</code></p>\n</blockquote>\n</li>\n<li>选项约束不满足时，如必选参数缺失，getopt 会报警，而 getopts 需要自己实现。</li>\n</ul>\n<h2 id=\"命令行概述\"><a href=\"#%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A6%82%E8%BF%B0\" aria-label=\"命令行概述 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>命令行概述</h2>\n<p>结合一个常见的命令进行分析</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -X POST --data &#39;a=3&#39; httpbin.org/post</code></pre></div>\n<p>getopt 将命令行参数划分为三类: 短选项(<code class=\"language-text\">-x</code>), 长选项(<code class=\"language-text\">--data</code>), 位置参数 (<code class=\"language-text\">httpbin.org/post</code>)。其中选项可以接或不接参数。</p>\n<h3 id=\"短选项\"><a href=\"#%E7%9F%AD%E9%80%89%E9%A1%B9\" aria-label=\"短选项 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>短选项</h3>\n<p>短选项由 <code class=\"language-text\">-</code>(单个破折号) 接单字母组成，字母区分大小写如 <code class=\"language-text\">-X</code>, <code class=\"language-text\">-a</code> ，可以接0到1个参数。</p>\n<ul>\n<li>不带参数如 <code class=\"language-text\">-I</code>, <code class=\"language-text\">-f</code>，作为标志位。</li>\n<li>\n<p>带参数</p>\n<ul>\n<li>空格形式 <code class=\"language-text\">-X POST</code>, <code class=\"language-text\">-f @demo.txt</code></li>\n<li>略去空格形式 <code class=\"language-text\">-XPOST</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"长选项\"><a href=\"#%E9%95%BF%E9%80%89%E9%A1%B9\" aria-label=\"长选项 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>长选项</h3>\n<p>长选项由 <code class=\"language-text\">--</code>(两个连续的破折号)和任意长度的字母数字组成，如 <code class=\"language-text\">-cookie-jar</code>，同样可接或不接参数。</p>\n<ul>\n<li>不带参数如 <code class=\"language-text\">--crlf</code>，作为标志位。</li>\n<li>\n<p>带参数</p>\n<ul>\n<li>以空格隔开选项和参数，<code class=\"language-text\">--data &#39;a=3&#39;</code></li>\n<li>以 <code class=\"language-text\">=</code> 连接选项和参数，<code class=\"language-text\">--data=&#39;a=3&#39;</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"选项字符串\"><a href=\"#%E9%80%89%E9%A1%B9%E5%AD%97%E7%AC%A6%E4%B8%B2\" aria-label=\"选项字符串 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>选项字符串</h2>\n<p>如何告知 getopt 使其能以我们期望的方式解析选项和参数呢？需要先将选项编码为选项字符串。</p>\n<p>getopt 识别两种选项字符串 ，一种用来配置短选项解析，另一种则是用来解析长选项。</p>\n<h3 id=\"短选项-1\"><a href=\"#%E7%9F%AD%E9%80%89%E9%A1%B9-1\" aria-label=\"短选项 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>短选项</h3>\n<p>getopt 也是一个命令行程序，它也是接受选项的。短选项字符串通过选项 <code class=\"language-text\">-o</code> 或 <code class=\"language-text\">--options</code> 传递。</p>\n<p>编码规则如下：</p>\n<ul>\n<li>每个字母均代表一个短选项。</li>\n<li>字母后如果接 <code class=\"language-text\">:</code>(单个冒号), 代表这个选项必须接一个参数。</li>\n<li>\n<p>字母后如果接 <code class=\"language-text\">::</code>(两个冒号), 代表这个选项可接或不接参数。</p>\n<ul>\n<li>带参数时，选项与参数采用空格形式，<code class=\"language-text\">-a3</code> 合法，而 <code class=\"language-text\">-a 3</code>非法。</li>\n</ul>\n</li>\n<li>字母后没有冒号，代表这个选项不接参数。</li>\n</ul>\n<p>举例分析:</p>\n<p>选项字符串 <code class=\"language-text\">a:bc::</code>，表示有三个短选项，<code class=\"language-text\">-a</code> 必须接一个参数，<code class=\"language-text\">-b</code> 不接参数，<code class=\"language-text\">-c</code> 接可选参数。</p>\n<h3 id=\"长选项-1\"><a href=\"#%E9%95%BF%E9%80%89%E9%A1%B9-1\" aria-label=\"长选项 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>长选项</h3>\n<p>长选项字符串通过选项 <code class=\"language-text\">-l</code> 或 <code class=\"language-text\">--longoptions</code> 传递。</p>\n<p>编码规则如下：</p>\n<ul>\n<li>多个选项用 <code class=\"language-text\">,</code>(逗号)隔开。</li>\n<li>字母后如果接 <code class=\"language-text\">:</code>(单个冒号), 代表这个选项必须接一个参数。</li>\n<li>\n<p>字母后如果接 <code class=\"language-text\">::</code>(两个冒号), 代表这个选项可接或不接参数。</p>\n<ul>\n<li>带参数时，选项与参数需要使用 <code class=\"language-text\">=</code> 形式连接，<code class=\"language-text\">--long=abc</code> 合法，而 <code class=\"language-text\">--long abc</code>非法。</li>\n</ul>\n</li>\n<li>字母后没有冒号，代表这个选项不接参数。</li>\n</ul>\n<p>举例分析:</p>\n<p>选项字符串 <code class=\"language-text\">getopt -l foo,bar::,baz:</code>，表示有三个长选项，<code class=\"language-text\">--foo</code> 不接参数，<code class=\"language-text\">--bar</code> 参数可选，<code class=\"language-text\">--baz</code> 必须接一个参数。</p>\n<h2 id=\"用法\"><a href=\"#%E7%94%A8%E6%B3%95\" aria-label=\"用法 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>用法</h2>\n<p>知道如何配置了，但具体如何使用呢？</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 选项 `-a` 和 `--arga` 接可选参数</span>\n<span class=\"token comment\"># 选项 `-b` 和 `--argb` 不接参数，充当莫种标志</span>\n<span class=\"token comment\"># 选项 `-c` 和 `--argc` 必须接一个参数 </span>\n\nARG_B<span class=\"token operator\">=</span>0\n\n<span class=\"token comment\"># 读取命令行参数, `-n` 指定命令名，报错时用到。</span>\nTEMP<span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span>getopt -o a::bc: -l arga::,argb,argc: -n <span class=\"token string\">'mycmd'</span> -- <span class=\"token string\">\"<span class=\"token variable\">$@</span>\"</span><span class=\"token variable\">`</span></span>\n<span class=\"token function\">eval</span> <span class=\"token keyword\">set</span> -- <span class=\"token string\">\"<span class=\"token variable\">$TEMP</span>\"</span>\n\n<span class=\"token comment\"># 提取选项和其参数</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span> <span class=\"token keyword\">in</span>\n        -a<span class=\"token operator\">|</span>--arga<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"<span class=\"token variable\">$2</span>\"</span> <span class=\"token keyword\">in</span>\n                <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> ARG_A<span class=\"token operator\">=</span><span class=\"token string\">'some default value'</span> <span class=\"token punctuation\">;</span> <span class=\"token function\">shift</span> 2 <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n                *<span class=\"token punctuation\">)</span> ARG_A<span class=\"token operator\">=</span><span class=\"token variable\">$2</span> <span class=\"token punctuation\">;</span> <span class=\"token function\">shift</span> 2 <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n            esac <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n        -b<span class=\"token operator\">|</span>--argb<span class=\"token punctuation\">)</span> ARG_B<span class=\"token operator\">=</span>1 <span class=\"token punctuation\">;</span> <span class=\"token function\">shift</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n        -c<span class=\"token operator\">|</span>--argc<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"<span class=\"token variable\">$2</span>\"</span> <span class=\"token keyword\">in</span>\n                <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token function\">shift</span> 2 <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n                *<span class=\"token punctuation\">)</span> ARG_C<span class=\"token operator\">=</span><span class=\"token variable\">$2</span> <span class=\"token punctuation\">;</span> <span class=\"token function\">shift</span> 2 <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n            esac <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n        --<span class=\"token punctuation\">)</span> <span class=\"token function\">shift</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n        *<span class=\"token punctuation\">)</span> <span class=\"token keyword\">echo</span> <span class=\"token string\">\"Internal error!\"</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">exit</span> 1 <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    esac\n<span class=\"token keyword\">done</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token string\">\"ARG_A = <span class=\"token variable\">$ARG_A</span>\"</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">\"ARG_B = <span class=\"token variable\">$ARG_B</span>\"</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">\"ARG_C = <span class=\"token variable\">$ARG_C</span>\"</span></code></pre></div>\n<h2 id=\"结论\"><a href=\"#%E7%BB%93%E8%AE%BA\" aria-label=\"结论 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>结论</h2>\n<p>在 BashScript 中使用 getopt，可以让命令行的解析提取变得直白优雅。\n上面介绍的部分已经足够日常使用了。但并没有涵盖 getopt 全部功用，更多需求可以查询其手册。</p>","excerpt":"getopt 是什么 getopt 是一个 c 编写的程序，提供参数解析功能。它是为了替换 bash 内置的老的 getopts 函数。如果设置了   环境变量，可以像使用 getopts 函数一样使用 getopt 命令。 getopt vs getopts getopts…","timeToRead":3,"headings":[{"value":"getopt 是什么","depth":2},{"value":"命令行概述","depth":2},{"value":"短选项","depth":3},{"value":"长选项","depth":3},{"value":"选项字符串","depth":2},{"value":"短选项","depth":3},{"value":"长选项","depth":3},{"value":"用法","depth":2},{"value":"结论","depth":2}],"frontmatter":{"title":"在 Bash 中使用 getopt 解析命令行参数","notoc":false,"excerpt":"有时我们需要自动化一些作业，这就需要编写 BashScript。为了控制脚本的行为，我们有两种选择: 环境变量和命令行参数。BashScript 中解析命令行参数常常会用到 getopt。","date":"September 16th 2017","rawDate":"2017-09-16"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/how-to-use-getopt-to-build-cli/","prev":{"fields":{"slug":"/docker-faq/"},"frontmatter":{"title":"Docker 一问一答","draft":false,"tags":["faq","docker"]}},"next":{"fields":{"slug":"/build-and-publish-electron-app-with-ci/"},"frontmatter":{"title":"使用 CI 构建和发布 electron 应用","draft":null,"tags":["howto","ci","electron"]}}}}